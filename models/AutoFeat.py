import pandas as pd
import numpy as np
from sklearn.datasets import load_diabetes
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score

# Import Autofeat
from autofeat import AutoFeatRegressor

print("--- Loading and preparing data ---")
# 1. Load data
diabetes = load_diabetes()
X = pd.read_csv(r"E:\Git\phenomics\barley\project\uav\models\dataset_3d.csv").loc[:,[
    'R_mean_msi_threeD_indices_02-06-24', 'G_mean_msi_threeD_indices_02-06-24','B_mean_msi_threeD_indices_02-06-24', 'redE_mean_msi_threeD_indices_02-06-24','nir_mean_msi_threeD_indices_02-06-24',
    'R_mean_msi_threeD_indices_30-06-24', 'G_mean_msi_threeD_indices_30-06-24','B_mean_msi_threeD_indices_30-06-24', 'redE_mean_msi_threeD_indices_30-06-24','nir_mean_msi_threeD_indices_30-06-24',
    'R_mean_msi_threeD_indices_21-07-24', 'G_mean_msi_threeD_indices_21-07-24','B_mean_msi_threeD_indices_21-07-24', 'redE_mean_msi_threeD_indices_21-07-24','nir_mean_msi_threeD_indices_21-07-24',
    'R_mean_msi_threeD_indices_11-08-24', 'G_mean_msi_threeD_indices_11-08-24','B_mean_msi_threeD_indices_11-08-24', 'redE_mean_msi_threeD_indices_11-08-24','nir_mean_msi_threeD_indices_11-08-24'
]]
y = pd.read_excel(r"E:\Git\phenomics\barley\project\uav\models\Agronomic_data_final.xlsx").loc[:,"GrainYield"]

print(f"Number of original dataset features: {X.shape[1]}")
print("Original feature names:", X.columns.tolist())
print(f"Dataset size: {X.shape[0]} samples")

# 2. Split data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
print(f"Training set size: {X_train.shape[0]}, Test set size: {X_test.shape[0]}")

print("\n--- Initializing and fitting Autofeat ---")
# 3. Initialize AutoFeatRegressor
#    - verbose=1: Display detailed information about the running process
#    - feateng_steps: The number of iterations for feature engineering (default 3)
#    - Other parameters can be adjusted, such as 'transformations', 'units', etc.
afreg = AutoFeatRegressor(verbose=1, feateng_steps=2)

# 4. Fit the Autofeat model (automatically generate and select features)
# Note: Autofeat may perform data scaling internally, but the original X_train remains unchanged
# Pass a Pandas DataFrame to retain feature names for easier viewing of the formulas
afreg.fit(X_train, y_train)

print("\n--- Transforming data ---")
# 5. Transforming the training set and test set
# The transform method will be applied to the best feature transformation learned during the fit process
X_train_tr = afreg.transform(X_train)
X_test_tr = afreg.transform(X_test)

print(f"Number of training set features after Autofeat processing: {X_train_tr.shape[1]}")
print(f"Number of test set features after Autofeat processing: {X_test_tr.shape[1]}")

# 6. View some of the generated features (optional)
print("\n--- Viewing Autofeat results ---")
print("Partially generated feature formulas:")
# afreg.feature_formulas_ stores the readable feature formulas
# afreg.new_feat_cols_ stores the names of the new features (which might not be very intuitive)
formulas = afreg.feature_formulas_
limit = 10
count = 0
for i, f in formulas.items():
    if count < limit:
        print(f"  Feature {i}: {f}")
        count += 1
    else:
        print(f"  ... (In total, {len(formulas)} features)")
        break

# If you want to view the feature names in DataFrame format (which may be longer)
if isinstance(X_train_tr, pd.DataFrame):
    print("\nPart of the transformed feature column names (DataFrame):")
    print(X_train_tr.columns[:10].tolist())
    if X_train_tr.shape[1] > 10:
        print("...")

print("\n--- Performance comparison ---")
# 7. Evaluate Performance 
# 7.a. Training and evaluation on the original features
print("Evaluation: Original features + Linear Regression")
model_orig = LinearRegression()
model_orig.fit(X_train, y_train)
y_pred_orig = model_orig.predict(X_test)
r2_orig = r2_score(y_test, y_pred_orig)
print(f"  Test set R² score (original features): {r2_orig:.4f}")

# 7.b. Train and evaluate on the features generated by Autofeat
print("Evaluation: Autofeat features + Linear Regression")
model_tr = LinearRegression()
# Note: If the transform function returns a numpy array, it might be necessary to convert it back to a DataFrame first.
# However, Autofeat usually tries to maintain the Pandas DataFrame format (if the input is a DataFrame)
model_tr.fit(X_train_tr, y_train)
y_pred_tr = model_tr.predict(X_test_tr)
r2_tr = r2_score(y_test, y_pred_tr)
print(f"  Test set R² score (using Autofeat features): {r2_tr:.4f}")

print("\n--- Summary ---")
print(f"Number of original features: {X_train.shape[1]}")
print(f"Number of Autofeat features: {X_train_tr.shape[1]}")
print(f"R² of original features: {r2_orig:.4f}")
print(f"R² of Autofeat features: {r2_tr:.4f}")

if r2_tr > r2_orig:
    print("\nThe features generated by Autofeat have enhanced the performance of the linear model in this example.")
elif r2_tr < r2_orig:
    print("\nThe features generated by Autofeat in this example have reduced the performance of the linear model (it might be necessary to adjust the parameters or the dataset is not suitable).")
else:
    print("\nThe features generated by Autofeat perform comparably to the original features in this example.")